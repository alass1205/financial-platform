const express = require('express');
const tradingService = require('../services/tradingService');
const { requireAuth } = require('../middleware/auth');

const router = express.Router();

// Middleware d'authentification pour toutes les routes trading
router.use(requireAuth);

// 📝 POST /api/trading/order - Créer un ordre
router.post('/order', async (req, res) => {
  try {
    const { pair, type, quantity, price } = req.body;
    const userId = req.user.id;

    // Validation des données
    if (!pair || !type || !quantity || !price) {
      return res.status(400).json({
        error: 'Missing required fields: pair, type, quantity, price'
      });
    }

    // Extraire le symbole de l'asset de la paire (ex: CLV/TRG -> CLV)
    const [assetSymbol] = pair.split('/');
    
    const order = await tradingService.createOrder(userId, {
      assetSymbol: assetSymbol.toUpperCase(),
      type: type.toUpperCase(),
      price: parseFloat(price),
      quantity: parseFloat(quantity)
    });

    res.status(201).json({
      status: 'OK',
      message: 'Order created successfully',
      order: {
        id: order.id,
        type: order.type,
        assetSymbol: order.asset.symbol,
        price: order.price,
        quantity: order.quantity,
        remaining: order.remaining,
        status: order.status,
        createdAt: order.createdAt
      },
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('❌ Error creating order:', error);
    res.status(500).json({
      error: 'Failed to create order',
      message: error.message
    });
  }
});

// 📊 GET /api/trading/stats - Statistiques de trading
router.get('/stats', async (req, res) => {
  try {
    const { PrismaClient } = require('@prisma/client');
    const prisma = new PrismaClient();

    const totalOrders = await prisma.order.count();
    const totalTrades = await prisma.trade.count();
    const activeOrders = await prisma.order.count({
      where: { status: { in: ['OPEN', 'PARTIALLY_FILLED'] } }
    });

    await prisma.$disconnect();

    res.json({
      status: 'OK',
      stats: { 
        totalOrders, 
        totalTrades, 
        activeOrders, 
        totalVolume: '0.00' 
      },
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('❌ Erreur stats:', error);
    res.status(500).json({ 
      error: 'Failed to get stats', 
      message: error.message 
    });
  }
});

// 📖 GET /api/trading/orderbook/:pair - Order book
router.get('/orderbook/:pair', async (req, res) => {
  try {
    const { pair } = req.params;
    console.log(`📖 Requête orderbook: ${pair}`);

    const [baseToken, quoteToken] = pair.split('/');
    
    res.json({
      status: 'OK',
      orderBook: {
        pair,
        baseToken,
        quoteToken,
        bids: [],
        asks: [],
        lastUpdate: new Date().toISOString()
      },
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('❌ Erreur orderbook:', error);
    res.status(500).json({ 
      error: 'Failed to get orderbook', 
      message: error.message 
    });
  }
});

// 📋 GET /api/trading/orders - Mes ordres
router.get('/orders', async (req, res) => {
  try {
    const userId = req.user.id;
    const orders = await tradingService.getUserOrders(userId);

    res.json({
      status: 'OK',
      orders,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('❌ Error getting orders:', error);
    res.status(500).json({
      error: 'Failed to get orders',
      message: error.message
    });
  }
});

// 💱 GET /api/trading/trades - Mes trades
router.get('/trades', async (req, res) => {
  try {
    const userId = req.user.id;
    const trades = await tradingService.getUserTrades(userId);

    res.json({
      status: 'OK',
      trades,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('❌ Error getting trades:', error);
    res.status(500).json({
      error: 'Failed to get trades',
      message: error.message
    });
  }
});

// ❌ DELETE /api/trading/order/:id - Annuler un ordre
router.delete('/order/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const userId = req.user.id;

    await tradingService.cancelOrder(id, userId);

    res.json({
      status: 'OK',
      message: 'Order cancelled successfully',
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('❌ Error cancelling order:', error);
    res.status(500).json({
      error: 'Failed to cancel order',
      message: error.message
    });
  }
});


// 📖 GET /api/trading/orderbook/:pair - Order book vide
router.get('/orderbook/:pair', async (req, res) => {
  const { pair } = req.params;
  console.log(`📖 Requête orderbook: ${pair}`);
  res.json({
    status: 'OK',
    orderBook: { 
      pair, 
      baseToken: pair.split('/')[0], 
      quoteToken: pair.split('/')[1],
      bids: [], 
      asks: [], 
      lastUpdate: new Date().toISOString() 
    },
    timestamp: new Date().toISOString()
  });
});

module.exports = router;
