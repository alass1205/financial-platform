import React, { useState, useEffect } from 'react';
import { useParams, useLocation } from 'react-router-dom';
import { LineChart, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Line } from 'recharts';
import { useWallet } from '../context/WalletContext';
import { TrendingUp, TrendingDown, Wallet, AlertCircle, CheckCircle, DollarSign } from 'lucide-react';
import apiService from '../services/apiService';

const AssetPage = () => {
  const { symbol } = useParams();
  const location = useLocation();
  const { account, kycCompleted } = useWallet();
  
  // Extraire le symbol de l'URL si useParams ne fonctionne pas
  const assetSymbol = symbol || location.pathname.split('/').pop();
  
  const [priceHistory, setPriceHistory] = useState([]);
  const [loading, setLoading] = useState(true);
  const [userBalance, setUserBalance] = useState(0);
  const [currentPrice, setCurrentPrice] = useState(0);
  
  // √âtats pour les formulaires de trading
  const [buyForm, setBuyForm] = useState({ quantity: '', price: '', type: 'market' });
  const [sellForm, setSellForm] = useState({ quantity: '', price: '', type: 'market' });
  const [isTrading, setIsTrading] = useState(false);
  const [notification, setNotification] = useState(null);
  const [authToken, setAuthToken] = useState(null);

  // Prix par d√©faut selon le cahier des charges
  const defaultPrices = {
    'CLV': 10,
    'ROO': 10, 
    'GOV': 200
  };

  const assetInfo = {
    'CLV': { name: 'Clove Company', type: 'Share', description: 'Actions de Clove Company' },
    'ROO': { name: 'Rooibos Limited', type: 'Share', description: 'Actions de Rooibos Limited' },
    'GOV': { name: 'Government Bonds', type: 'Bond', description: 'Obligations gouvernementales' }
  };

  // AUTO-AUTHENTIFICATION - CORRIG√â
  const ensureAuthentication = async () => {
    if (!account) return null;

    let token = localStorage.getItem('auth_token');
    
    if (!token) {
      try {
        console.log('üîë Auto-login pour trading...');
        
        const loginResponse = await fetch('http://localhost:3001/api/auth/login', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ address: account })
        });
        
        const loginResult = await loginResponse.json();
        
        if (loginResult.status === 'OK' && loginResult.token) {
          token = loginResult.token;
          localStorage.setItem('auth_token', token);
          setAuthToken(token);
          console.log('‚úÖ Auto-login r√©ussi');
        } else {
          console.log('‚ùå √âchec auto-login:', loginResult.error);
          return null;
        }
      } catch (error) {
        console.error('‚ùå Erreur auto-login:', error);
        return null;
      }
    } else {
      setAuthToken(token);
    }
    
    return token;
  };

  useEffect(() => {
    if (assetSymbol) {
      loadAssetData();
    }
  }, [assetSymbol]);

  useEffect(() => {
    if (account && kycCompleted) {
      loadUserBalance();
      ensureAuthentication();
    }
  }, [account, kycCompleted, assetSymbol]);

  const loadAssetData = async () => {
    try {
      setLoading(true);
      
      // Charger l'historique des prix
      const historyResponse = await fetch(`http://localhost:3001/api/public/trading/history/${assetSymbol}`);
      const historyData = await historyResponse.json();
      
      // Charger le prix actuel
      const priceResponse = await fetch(`http://localhost:3001/api/public/trading/price/${assetSymbol}`);
      const priceData = await priceResponse.json();
      
      if (historyData.success && historyData.data.length > 0) {
        // Convertir les donn√©es pour le graphique
        const chartData = historyData.data.map((item, index) => ({
          time: index + 1,
          price: parseFloat(item.price),
          volume: parseFloat(item.volume || 0)
        }));
        setPriceHistory(chartData);
      } else {
        // Donn√©es par d√©faut si pas d'historique
        const defaultData = [
          { time: 1, price: defaultPrices[assetSymbol] || 10, volume: 0 },
          { time: 2, price: defaultPrices[assetSymbol] || 10, volume: 0 },
          { time: 3, price: defaultPrices[assetSymbol] || 10, volume: 0 }
        ];
        setPriceHistory(defaultData);
      }
      
      if (priceData.success) {
        setCurrentPrice(parseFloat(priceData.data.price));
      } else {
        setCurrentPrice(defaultPrices[assetSymbol] || 10);
      }
      
    } catch (error) {
      console.error('Erreur loading asset data:', error);
      // Prix par d√©faut en cas d'erreur
      setPriceHistory([{
        time: 1,
        price: defaultPrices[assetSymbol] || 10,
        volume: 0
      }]);
      setCurrentPrice(defaultPrices[assetSymbol] || 10);
    } finally {
      setLoading(false);
    }
  };

  // NOUVELLE FONCTION - EXACTEMENT COMME PORTFOLIO
  const loadUserBalance = async () => {
    try {
      console.log(`üîç Chargement balance ${assetSymbol} pour:`, account);
      
      // Utiliser exactement la m√™me m√©thode que Portfolio
      const response = await apiService.getPortfolioBalances();
      
      if (response.balances && response.balances.tokens) {
        // Trouver la balance pour cet asset sp√©cifique
        const assetBalance = response.balances.tokens[assetSymbol];
        
        if (assetBalance && assetBalance.formatted) {
          const balance = parseFloat(assetBalance.formatted);
          setUserBalance(balance);
          console.log(`‚úÖ Balance ${assetSymbol} trouv√©e:`, balance);
        } else {
          console.log(`‚ùå Aucune balance ${assetSymbol} dans tokens:`, response.balances.tokens);
          setUserBalance(0);
        }
      } else {
        console.log('‚ùå R√©ponse portfolio invalide:', response);
        setUserBalance(0);
      }
      
    } catch (error) {
      console.error(`‚ùå Erreur loading balance ${assetSymbol}:`, error);
      setUserBalance(0);
    }
  };

  // Afficher notification temporaire
  const showNotification = (message, type = 'success') => {
    setNotification({ message, type });
    setTimeout(() => setNotification(null), 5000);
  };

  // Fonction pour cr√©er un ordre d'achat - CORRIG√â
  const handleBuyOrder = async (type = 'market') => {
    if (!account || !kycCompleted) {
      showNotification('Veuillez vous connecter et compl√©ter votre KYC', 'error');
      return;
    }

    // S'assurer de l'authentification
    const token = await ensureAuthentication();
    if (!token) {
      showNotification('Erreur d\'authentification', 'error');
      return;
    }

    const quantity = parseFloat(buyForm.quantity);
    const price = type === 'market' ? currentPrice : parseFloat(buyForm.price);

    if (!quantity || quantity <= 0) {
      showNotification('Veuillez entrer une quantit√© valide', 'error');
      return;
    }

    if (type === 'limit' && (!price || price <= 0)) {
      showNotification('Veuillez entrer un prix valide', 'error');
      return;
    }

    setIsTrading(true);

    try {
      console.log(`üü¢ Cr√©ation ordre BUY ${assetSymbol}:`, { quantity, price, type });

      const orderData = {
        pair: `${assetSymbol}/TRG`,
        type: 'BUY',
        quantity: quantity.toString(),
        price: price.toString()
      };

      const response = await fetch('http://localhost:3001/api/trading/order', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(orderData)
      });

      const result = await response.json();

      if (result.status === 'OK' && result.order) {
        showNotification(`Ordre d'achat cr√©√© avec succ√®s ! ID: ${result.order.id}`, 'success');
        
        // Reset formulaire
        setBuyForm({ quantity: '', price: '', type: 'market' });
        
        // Recharger les donn√©es
        await loadAssetData();
        await loadUserBalance();
      } else {
        showNotification(`Erreur: ${result.error || result.message}`, 'error');
      }

    } catch (error) {
      console.error('Erreur cr√©ation ordre buy:', error);
      showNotification('Erreur lors de la cr√©ation de l\'ordre', 'error');
    } finally {
      setIsTrading(false);
    }
  };

  // Fonction pour cr√©er un ordre de vente - CORRIG√â
  const handleSellOrder = async (type = 'market') => {
    if (!account || !kycCompleted) {
      showNotification('Veuillez vous connecter et compl√©ter votre KYC', 'error');
      return;
    }

    // S'assurer de l'authentification
    const token = await ensureAuthentication();
    if (!token) {
      showNotification('Erreur d\'authentification', 'error');
      return;
    }

    const quantity = parseFloat(sellForm.quantity);
    const price = type === 'market' ? currentPrice : parseFloat(sellForm.price);

    if (!quantity || quantity <= 0) {
      showNotification('Veuillez entrer une quantit√© valide', 'error');
      return;
    }

    if (quantity > userBalance) {
      showNotification(`Solde insuffisant. Vous avez ${userBalance} ${assetSymbol}`, 'error');
      return;
    }

    if (type === 'limit' && (!price || price <= 0)) {
      showNotification('Veuillez entrer un prix valide', 'error');
      return;
    }

    setIsTrading(true);

    try {
      console.log(`üî¥ Cr√©ation ordre SELL ${assetSymbol}:`, { quantity, price, type });

      const orderData = {
        pair: `${assetSymbol}/TRG`,
        type: 'SELL',
        quantity: quantity.toString(),
        price: price.toString()
      };

      const response = await fetch('http://localhost:3001/api/trading/order', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(orderData)
      });

      const result = await response.json();

      if (result.status === 'OK' && result.order) {
        showNotification(`Ordre de vente cr√©√© avec succ√®s ! ID: ${result.order.id}`, 'success');
        
        // Reset formulaire
        setSellForm({ quantity: '', price: '', type: 'market' });
        
        // Recharger les donn√©es
        await loadAssetData();
        await loadUserBalance();
      } else {
        showNotification(`Erreur: ${result.error || result.message}`, 'error');
      }

    } catch (error) {
      console.error('Erreur cr√©ation ordre sell:', error);
      showNotification('Erreur lors de la cr√©ation de l\'ordre', 'error');
    } finally {
      setIsTrading(false);
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-blue-500 mx-auto"></div>
          <p className="mt-4 text-gray-600">Chargement des donn√©es {assetSymbol}...</p>
        </div>
      </div>
    );
  }

  const currentAsset = assetInfo[assetSymbol];

  if (!currentAsset) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <h1 className="text-2xl font-bold text-gray-900 mb-4">Asset non trouv√©</h1>
          <p className="text-gray-600">L'asset {assetSymbol} n'existe pas.</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Notification */}
      {notification && (
        <div className={`fixed top-4 right-4 z-50 p-4 rounded-lg shadow-lg ${
          notification.type === 'success' ? 'bg-green-500 text-white' : 'bg-red-500 text-white'
        }`}>
          <div className="flex items-center space-x-2">
            {notification.type === 'success' ? (
              <CheckCircle className="w-5 h-5" />
            ) : (
              <AlertCircle className="w-5 h-5" />
            )}
            <span>{notification.message}</span>
          </div>
        </div>
      )}

      {/* Header */}
      <div className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-3xl font-bold text-gray-900">
                {currentAsset.name} ({assetSymbol})
              </h1>
              <p className="text-gray-600 mt-1">{currentAsset.description}</p>
            </div>
            <div className="text-right">
              <div className="text-3xl font-bold text-blue-600">
                {currentPrice} TRG
              </div>
              <div className="text-sm text-gray-500">Prix actuel</div>
              {account && kycCompleted && (
                <div className="text-sm text-green-600 mt-1">
                  Votre solde: {userBalance} {assetSymbol}
                </div>
              )}
            </div>
          </div>
        </div>
      </div>

      {/* Contenu principal */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          
          {/* Graphique √† gauche */}
          <div className="bg-white rounded-lg shadow-md p-6">
            <h2 className="text-xl font-semibold mb-4">√âvolution du prix</h2>
            <div className="h-96">
              <ResponsiveContainer width="100%" height="100%">
                <LineChart data={priceHistory}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis 
                    dataKey="time" 
                    label={{ value: 'Temps', position: 'insideBottom', offset: -10 }}
                  />
                  <YAxis 
                    label={{ value: 'Prix (TRG)', angle: -90, position: 'insideLeft' }}
                  />
                  <Tooltip 
                    formatter={(value, name) => [
                      `${value} TRG`, 
                      name === 'price' ? 'Prix' : 'Volume'
                    ]}
                  />
                  <Line 
                    type="monotone" 
                    dataKey="price" 
                    stroke="#2563eb" 
                    strokeWidth={2}
                    dot={{ fill: '#2563eb', strokeWidth: 2, r: 4 }}
                    activeDot={{ r: 6 }}
                  />
                </LineChart>
              </ResponsiveContainer>
            </div>
          </div>

          {/* Controls √† droite */}
          <div className="space-y-6">
            
            {/* Trading Section */}
            {account && kycCompleted ? (
              <>
                {/* Formulaire de vente d√©taill√© - AUDIT TEST AYA */}
                <div className="bg-white rounded-lg shadow-md p-6">
                  <h3 className="text-lg font-semibold mb-4 text-red-700">üìâ Vendre {assetSymbol} - Test Audit Aya</h3>
                  <div className="space-y-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Quantit√© {assetSymbol} (Disponible: {userBalance})
                      </label>
                      <input
                        type="number"
                        value={sellForm.quantity}
                        onChange={(e) => setSellForm({ ...sellForm, quantity: e.target.value })}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-red-500"
                        placeholder="Ex: 4"
                        min="0"
                        max={userBalance}
                        step="0.01"
                      />
                    </div>
                    
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Prix (TRG)
                      </label>
                      <input
                        type="number"
                        value={sellForm.price}
                        onChange={(e) => setSellForm({ ...sellForm, price: e.target.value })}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-red-500"
                        placeholder="Ex: 9"
                        min="0"
                        step="0.01"
                      />
                    </div>

                    <button
                      onClick={() => handleSellOrder('limit')}
                      disabled={isTrading || !sellForm.quantity || !sellForm.price || userBalance <= 0}
                      className="w-full bg-red-600 hover:bg-red-700 disabled:opacity-50 text-white font-medium py-3 px-4 rounded-lg transition-colors"
                    >
                      {isTrading ? 'Cr√©ation en cours...' : `Vendre ${sellForm.quantity || '0'} ${assetSymbol} √† ${sellForm.price || '0'} TRG`}
                    </button>
                  </div>
                </div>

                {/* Formulaire d'achat d√©taill√© - AUDIT TEST BEATRIZ */}
                <div className="bg-white rounded-lg shadow-md p-6">
                  <h3 className="text-lg font-semibold mb-4 text-green-700">üìà Acheter {assetSymbol} - Test Audit Beatriz</h3>
                  <div className="space-y-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Quantit√© {assetSymbol}
                      </label>
                      <input
                        type="number"
                        value={buyForm.quantity}
                        onChange={(e) => setBuyForm({ ...buyForm, quantity: e.target.value })}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500"
                        placeholder="Ex: 10"
                        min="0"
                        step="0.01"
                      />
                    </div>

                    <button
                      onClick={() => handleBuyOrder('market')}
                      disabled={isTrading || !buyForm.quantity}
                      className="w-full bg-green-600 hover:bg-green-700 disabled:opacity-50 text-white font-medium py-3 px-4 rounded-lg transition-colors"
                    >
                      {isTrading ? 'Achat en cours...' : `Acheter ${buyForm.quantity || '0'} ${assetSymbol} au march√© (${currentPrice} TRG)`}
                    </button>
                  </div>
                </div>

                {/* Actions rapides */}
                <div className="bg-white rounded-lg shadow-md p-6">
                  <h2 className="text-xl font-semibold mb-4">Trading Rapide</h2>
                  <div className="grid grid-cols-2 gap-4">
                    <button 
                      onClick={() => handleBuyOrder('market')}
                      disabled={isTrading}
                      className="bg-green-500 hover:bg-green-600 disabled:opacity-50 text-white font-medium py-3 px-4 rounded-lg transition-colors flex items-center justify-center space-x-2"
                    >
                      <TrendingUp className="w-4 h-4" />
                      <span>{isTrading ? 'Traitement...' : 'Acheter au march√©'}</span>
                    </button>
                    <button 
                      onClick={() => handleSellOrder('market')}
                      disabled={isTrading || userBalance <= 0}
                      className="bg-red-500 hover:bg-red-600 disabled:opacity-50 text-white font-medium py-3 px-4 rounded-lg transition-colors flex items-center justify-center space-x-2"
                    >
                      <TrendingDown className="w-4 h-4" />
                      <span>{isTrading ? 'Traitement...' : 'Vendre au march√©'}</span>
                    </button>
                  </div>
                </div>
              </>
            ) : (
              /* Message pour utilisateurs non connect√©s */
              <div className="bg-white rounded-lg shadow-md p-6 text-center">
                <Wallet className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                <h3 className="text-lg font-semibold text-gray-900 mb-2">Connexion requise</h3>
                <p className="text-gray-600 mb-4">
                  Connectez votre wallet et compl√©tez votre KYC pour trader {assetSymbol}
                </p>
              </div>
            )}

            {/* Info asset */}
            <div className="bg-white rounded-lg shadow-md p-6">
              <h2 className="text-xl font-semibold mb-4">Informations</h2>
              <div className="space-y-3">
                <div className="flex justify-between">
                  <span className="text-gray-600">Type:</span>
                  <span className="font-medium">{currentAsset.type}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">Prix par d√©faut:</span>
                  <span className="font-medium">{defaultPrices[assetSymbol]} TRG</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">Prix actuel:</span>
                  <span className="font-medium text-blue-600">{currentPrice} TRG</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">Symbol:</span>
                  <span className="font-medium">{assetSymbol}</span>
                </div>
                {authToken && (
                  <div className="flex justify-between">
                    <span className="text-gray-600">Auth:</span>
                    <span className="font-medium text-green-600">‚úÖ Connect√©</span>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default AssetPage;
